# (generated with --quick)

import collections
from typing import Callable, Dict, Iterable, Set, Sized, Tuple, Type, TypeVar, Union

ASTEROID: str
FREE: str
enum: module
logging: module
math: module
operator: module

_TAsteroidMap = TypeVar('_TAsteroidMap', bound=AsteroidMap)
_TDistanceVector = TypeVar('_TDistanceVector', bound=DistanceVector)
_TPosition = TypeVar('_TPosition', bound=Position)

class AsteroidMap(tuple):
    __slots__ = ["asteroids", "size"]
    __dict__: collections.OrderedDict[str, Union[Dict[Position, int], Tuple[int, int]]]
    _field_defaults: collections.OrderedDict[str, Union[Dict[Position, int], Tuple[int, int]]]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    asteroids: Dict[Position, int]
    size: Tuple[int, int]
    def __getnewargs__(self) -> Tuple[Dict[Position, int], Tuple[int, int]]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TAsteroidMap], asteroids: Dict[Position, int], size: Tuple[int, int]) -> _TAsteroidMap: ...
    def _asdict(self) -> collections.OrderedDict[str, Union[Dict[Position, int], Tuple[int, int]]]: ...
    @classmethod
    def _make(cls: Type[_TAsteroidMap], iterable: Iterable[Union[Dict[Position, int], Tuple[int, int]]], new = ..., len: Callable[[Sized], int] = ...) -> _TAsteroidMap: ...
    def _replace(self: _TAsteroidMap, **kwds: Union[Dict[Position, int], Tuple[int, int]]) -> _TAsteroidMap: ...

class DistanceVector(tuple):
    __slots__ = ["dx", "dy"]
    __dict__: collections.OrderedDict[str, int]
    _field_defaults: collections.OrderedDict[str, int]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    dx: int
    dy: int
    def __getnewargs__(self) -> Tuple[int, int]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TDistanceVector], dx: int, dy: int) -> _TDistanceVector: ...
    def _asdict(self) -> collections.OrderedDict[str, int]: ...
    @classmethod
    def _make(cls: Type[_TDistanceVector], iterable: Iterable[int], new = ..., len: Callable[[Sized], int] = ...) -> _TDistanceVector: ...
    def _replace(self: _TDistanceVector, **kwds: int) -> _TDistanceVector: ...

class Position(tuple):
    __slots__ = ["x", "y"]
    __dict__: collections.OrderedDict[str, int]
    _field_defaults: collections.OrderedDict[str, int]
    _field_types: collections.OrderedDict[str, type]
    _fields: Tuple[str, str]
    x: int
    y: int
    def __getnewargs__(self) -> Tuple[int, int]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[_TPosition], x: int, y: int) -> _TPosition: ...
    def _asdict(self) -> collections.OrderedDict[str, int]: ...
    @classmethod
    def _make(cls: Type[_TPosition], iterable: Iterable[int], new = ..., len: Callable[[Sized], int] = ...) -> _TPosition: ...
    def _replace(self: _TPosition, **kwds: int) -> _TPosition: ...

class StepVector(DistanceVector):
    dx: int
    dy: int

def asteroid_map_from_inputs(inputs: str) -> AsteroidMap: ...
def asteroid_with_max_visible_asteroids(asteroid_map: AsteroidMap) -> Tuple[Position, int]: ...
def clockwise_vector(vector: DistanceVector) -> DistanceVector: ...
def detectable_asteroids(position: Position, asteroid_map: AsteroidMap) -> Set[Position]: ...
def distance_vector(position_from: Position, position_to: Position) -> DistanceVector: ...
def get_angle(vector: DistanceVector) -> float: ...
def get_blocked_asteroids(position: Position, other_position: Position, asteroid_map: AsteroidMap) -> Set[Position]: ...
def next_position(position: Position, step: StepVector) -> Position: ...
def nth_asteroid_destroyed(asteroid_map: AsteroidMap, laser_position: Position, nth: int) -> Position: ...
def position_in_map(position: Position, asteroid_map: AsteroidMap) -> bool: ...
def rotate_vector(vector: DistanceVector, angle: float = ..., precision: int = ...) -> DistanceVector: ...
def step_vector(vector: DistanceVector) -> StepVector: ...
def transform_vector(vector: DistanceVector) -> DistanceVector: ...
def upwards_vector(vector: DistanceVector) -> DistanceVector: ...
